generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                     String                  @id @default(uuid())
  name                   String
  subdomain              String                  @unique
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  settings               Json?
  status                 OrgStatus               @default(ACTIVE)
  reports                AnalyticsReport[]
  analyticsSchedules     AnalyticsSchedule[]
  apiKeys                ApiKey[]
  dataSources            DataSource[]
  datasets               Dataset[]
  payments               Payment[]
  paymentReconciliations PaymentReconciliation[]
  subscription           Subscription?
  users                  User[]
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  password     String
  firstName    String?
  lastName     String?
  role         UserRole     @default(USER)
  orgId        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  lastLoginAt  DateTime?
  status       UserStatus   @default(ACTIVE)
  auditLogs    AuditLog[]
  payments     Payment[]
  organization Organization @relation(fields: [orgId], references: [id])
}

model ApiKey {
  id           String       @id @default(cuid())
  key          String       @unique
  name         String
  orgId        String
  expiresAt    DateTime?
  createdAt    DateTime     @default(now())
  lastUsedAt   DateTime?
  scopes       String[]
  revokedAt    DateTime?
  useCount     Int          @default(0)
  status       String       @default("ACTIVE")
  organization Organization @relation(fields: [orgId], references: [id])
}

model DataSource {
  id           String           @id @default(uuid())
  name         String
  type         DataSourceType
  orgId        String
  config       Json
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  status       DataSourceStatus @default(ACTIVE)
  lastSyncAt   DateTime?
  organization Organization     @relation(fields: [orgId], references: [id])
  dataStreams  DataStream[]
  datasets     Dataset[]
}

model DataStream {
  id              String       @id @default(uuid())
  name            String
  dataSourceId    String
  schema          Json
  transformations Json?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  status          StreamStatus @default(ACTIVE)
  dataSource      DataSource   @relation(fields: [dataSourceId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?  // Made optional
  action    String
  resource  String
  details   Json?
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?
  user      User?    @relation(fields: [userId], references: [id]) // Made optional
}

model Subscription {
  id           String       @id @default(uuid())
  orgId        String       @unique
  plan         String
  status       SubStatus    @default(ACTIVE)
  startDate    DateTime     @default(now())
  endDate      DateTime?
  billingInfo  Json?
  organization Organization @relation(fields: [orgId], references: [id])
}

model Dataset {
  id           String       @id @default(uuid())
  name         String
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  orgId        String
  dataSourceId String
  schema       Json
  data         Json[]
  analyses     Analysis[]
  dataSource   DataSource   @relation(fields: [dataSourceId], references: [id])
  organization Organization @relation(fields: [orgId], references: [id])
}

model Analysis {
  id         String   @id @default(uuid())
  type       String
  datasetId  String
  parameters Json?
  results    Json?
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  error      String?
  dataset    Dataset  @relation(fields: [datasetId], references: [id])
}

model IndustrySchema {
  id          String   @id @default(uuid())
  type        String   @unique
  name        String
  description String?
  schema      Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AnalyticsReport {
  id           String       @id @default(uuid())
  name         String
  description  String?
  orgId        String
  type         String
  config       Json
  schedule     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  lastRun      DateTime?
  results      Json?
  organization Organization @relation(fields: [orgId], references: [id])
}

model AnalyticsSchedule {
  id           String       @id @default(uuid())
  orgId        String
  frequency    String
  interval     Int?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  organization Organization @relation(fields: [orgId], references: [id])
}

model Payment {
  id                 String          @id @default(cuid())
  userId             String
  amount             Decimal         @db.Decimal(10, 2)
  currency           String          @default("KES")
  provider           PaymentProvider
  status             PaymentStatus   @default(PENDING)
  checkoutRequestId  String?         @unique
  merchantRequestId  String?
  mpesaReceiptNumber String?
  phoneNumber        String?
  errorMessage       String?
  retryCount         Int             @default(0)
  metadata           Json?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  orgId              String
  callbacks          MpesaCallback[]
  organization       Organization    @relation(fields: [orgId], references: [id])
  user               User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orgId])
  @@index([status])
}

model MpesaCallback {
  id                 String   @id @default(cuid())
  checkoutRequestId  String
  merchantRequestId  String
  resultCode         String
  resultDesc         String
  amount             Decimal  @db.Decimal(10, 2)
  mpesaReceiptNumber String?
  phoneNumber        String
  transactionDate    DateTime
  metadata           Json?
  createdAt          DateTime @default(now())
  payment            Payment  @relation(fields: [checkoutRequestId], references: [checkoutRequestId])

  @@index([checkoutRequestId])
  @@index([transactionDate])
}

model PaymentReconciliation {
  id                     String       @id @default(cuid())
  date                   DateTime     @unique
  totalTransactions      Int
  successfulTransactions Int
  failedTransactions     Int
  totalAmount            Decimal      @db.Decimal(10, 2)
  metadata               Json?
  createdAt              DateTime     @default(now())
  orgId                  String
  organization           Organization @relation(fields: [orgId], references: [id])

  @@index([date])
  @@index([orgId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentProvider {
  MPESA
  STRIPE
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  USER
  READONLY
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrgStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ApiKeyStatus {
  ACTIVE
  INACTIVE
  REVOKED
}

enum DataSourceType {
  POS_SYSTEM
  ERP
  DATABASE
  API
  FILE_IMPORT
  CUSTOM
}

enum DataSourceStatus {
  ACTIVE
  INACTIVE
  ERROR
  SYNCING
}

enum StreamStatus {
  ACTIVE
  PAUSED
  ERROR
}

enum SubStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}
